package com.hss01248.media.mymediastore.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hss01248.media.mymediastore.bean.StorageBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STORAGE_BEAN".
*/
public class StorageBeanDao extends AbstractDao<StorageBean, Long> {

    public static final String TABLENAME = "STORAGE_BEAN";

    /**
     * Properties of entity StorageBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Usable = new Property(1, int.class, "usable", false, "USABLE");
        public final static Property Type = new Property(2, int.class, "type", false, "TYPE");
        public final static Property DiskId = new Property(3, String.class, "diskId", false, "DISK_ID");
        public final static Property Ip = new Property(4, String.class, "ip", false, "IP");
        public final static Property Uname = new Property(5, String.class, "uname", false, "UNAME");
        public final static Property Pw = new Property(6, String.class, "pw", false, "PW");
        public final static Property RootDirs = new Property(7, String.class, "rootDirs", false, "ROOT_DIRS");
        public final static Property SafRoot = new Property(8, String.class, "safRoot", false, "SAF_ROOT");
        public final static Property Name = new Property(9, String.class, "name", false, "NAME");
    }


    public StorageBeanDao(DaoConfig config) {
        super(config);
    }
    
    public StorageBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STORAGE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"USABLE\" INTEGER NOT NULL ," + // 1: usable
                "\"TYPE\" INTEGER NOT NULL ," + // 2: type
                "\"DISK_ID\" TEXT," + // 3: diskId
                "\"IP\" TEXT," + // 4: ip
                "\"UNAME\" TEXT," + // 5: uname
                "\"PW\" TEXT," + // 6: pw
                "\"ROOT_DIRS\" TEXT," + // 7: rootDirs
                "\"SAF_ROOT\" TEXT," + // 8: safRoot
                "\"NAME\" TEXT);"); // 9: name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STORAGE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StorageBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getUsable());
        stmt.bindLong(3, entity.getType());
 
        String diskId = entity.getDiskId();
        if (diskId != null) {
            stmt.bindString(4, diskId);
        }
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(5, ip);
        }
 
        String uname = entity.getUname();
        if (uname != null) {
            stmt.bindString(6, uname);
        }
 
        String pw = entity.getPw();
        if (pw != null) {
            stmt.bindString(7, pw);
        }
 
        String rootDirs = entity.getRootDirs();
        if (rootDirs != null) {
            stmt.bindString(8, rootDirs);
        }
 
        String safRoot = entity.getSafRoot();
        if (safRoot != null) {
            stmt.bindString(9, safRoot);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(10, name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StorageBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getUsable());
        stmt.bindLong(3, entity.getType());
 
        String diskId = entity.getDiskId();
        if (diskId != null) {
            stmt.bindString(4, diskId);
        }
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(5, ip);
        }
 
        String uname = entity.getUname();
        if (uname != null) {
            stmt.bindString(6, uname);
        }
 
        String pw = entity.getPw();
        if (pw != null) {
            stmt.bindString(7, pw);
        }
 
        String rootDirs = entity.getRootDirs();
        if (rootDirs != null) {
            stmt.bindString(8, rootDirs);
        }
 
        String safRoot = entity.getSafRoot();
        if (safRoot != null) {
            stmt.bindString(9, safRoot);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(10, name);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public StorageBean readEntity(Cursor cursor, int offset) {
        StorageBean entity = new StorageBean( //
            cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // usable
            cursor.getInt(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // diskId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ip
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // uname
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // pw
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // rootDirs
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // safRoot
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StorageBean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setUsable(cursor.getInt(offset + 1));
        entity.setType(cursor.getInt(offset + 2));
        entity.setDiskId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIp(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUname(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPw(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRootDirs(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSafRoot(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StorageBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StorageBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StorageBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
