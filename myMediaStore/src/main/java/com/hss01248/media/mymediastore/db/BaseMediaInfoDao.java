package com.hss01248.media.mymediastore.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hss01248.media.mymediastore.bean.BaseMediaInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BASE_MEDIA_INFO".
*/
public class BaseMediaInfoDao extends AbstractDao<BaseMediaInfo, String> {

    public static final String TABLENAME = "BASE_MEDIA_INFO";

    /**
     * Properties of entity BaseMediaInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Dir = new Property(0, String.class, "dir", false, "DIR");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property IsHiden = new Property(2, int.class, "isHiden", false, "IS_HIDEN");
        public final static Property Path = new Property(3, String.class, "path", true, "PATH");
        public final static Property FileSize = new Property(4, long.class, "fileSize", false, "FILE_SIZE");
        public final static Property UpdatedTime = new Property(5, long.class, "updatedTime", false, "UPDATED_TIME");
        public final static Property MaxSide = new Property(6, int.class, "maxSide", false, "MAX_SIDE");
        public final static Property Duration = new Property(7, int.class, "duration", false, "DURATION");
        public final static Property Type = new Property(8, int.class, "type", false, "TYPE");
        public final static Property PraiseCount = new Property(9, Integer.class, "praiseCount", false, "PRAISE_COUNT");
        public final static Property DiskType = new Property(10, int.class, "diskType", false, "DISK_TYPE");
    }


    public BaseMediaInfoDao(DaoConfig config) {
        super(config);
    }
    
    public BaseMediaInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BASE_MEDIA_INFO\" (" + //
                "\"DIR\" TEXT," + // 0: dir
                "\"NAME\" TEXT," + // 1: name
                "\"IS_HIDEN\" INTEGER NOT NULL ," + // 2: isHiden
                "\"PATH\" TEXT PRIMARY KEY NOT NULL ," + // 3: path
                "\"FILE_SIZE\" INTEGER NOT NULL ," + // 4: fileSize
                "\"UPDATED_TIME\" INTEGER NOT NULL ," + // 5: updatedTime
                "\"MAX_SIDE\" INTEGER NOT NULL ," + // 6: maxSide
                "\"DURATION\" INTEGER NOT NULL ," + // 7: duration
                "\"TYPE\" INTEGER NOT NULL ," + // 8: type
                "\"PRAISE_COUNT\" INTEGER," + // 9: praiseCount
                "\"DISK_TYPE\" INTEGER NOT NULL );"); // 10: diskType
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_BASE_MEDIA_INFO_DIR ON \"BASE_MEDIA_INFO\"" +
                " (\"DIR\" ASC);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_BASE_MEDIA_INFO_NAME ON \"BASE_MEDIA_INFO\"" +
                " (\"NAME\" ASC);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_BASE_MEDIA_INFO_FILE_SIZE ON \"BASE_MEDIA_INFO\"" +
                " (\"FILE_SIZE\" ASC);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_BASE_MEDIA_INFO_UPDATED_TIME ON \"BASE_MEDIA_INFO\"" +
                " (\"UPDATED_TIME\" ASC);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_BASE_MEDIA_INFO_MAX_SIDE ON \"BASE_MEDIA_INFO\"" +
                " (\"MAX_SIDE\" ASC);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_BASE_MEDIA_INFO_DURATION ON \"BASE_MEDIA_INFO\"" +
                " (\"DURATION\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BASE_MEDIA_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BaseMediaInfo entity) {
        stmt.clearBindings();
 
        String dir = entity.getDir();
        if (dir != null) {
            stmt.bindString(1, dir);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getIsHiden());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(4, path);
        }
        stmt.bindLong(5, entity.getFileSize());
        stmt.bindLong(6, entity.getUpdatedTime());
        stmt.bindLong(7, entity.getMaxSide());
        stmt.bindLong(8, entity.getDuration());
        stmt.bindLong(9, entity.getType());
 
        Integer praiseCount = entity.getPraiseCount();
        if (praiseCount != null) {
            stmt.bindLong(10, praiseCount);
        }
        stmt.bindLong(11, entity.getDiskType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BaseMediaInfo entity) {
        stmt.clearBindings();
 
        String dir = entity.getDir();
        if (dir != null) {
            stmt.bindString(1, dir);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getIsHiden());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(4, path);
        }
        stmt.bindLong(5, entity.getFileSize());
        stmt.bindLong(6, entity.getUpdatedTime());
        stmt.bindLong(7, entity.getMaxSide());
        stmt.bindLong(8, entity.getDuration());
        stmt.bindLong(9, entity.getType());
 
        Integer praiseCount = entity.getPraiseCount();
        if (praiseCount != null) {
            stmt.bindLong(10, praiseCount);
        }
        stmt.bindLong(11, entity.getDiskType());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3);
    }    

    @Override
    public BaseMediaInfo readEntity(Cursor cursor, int offset) {
        BaseMediaInfo entity = new BaseMediaInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // dir
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getInt(offset + 2), // isHiden
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // path
            cursor.getLong(offset + 4), // fileSize
            cursor.getLong(offset + 5), // updatedTime
            cursor.getInt(offset + 6), // maxSide
            cursor.getInt(offset + 7), // duration
            cursor.getInt(offset + 8), // type
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // praiseCount
            cursor.getInt(offset + 10) // diskType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BaseMediaInfo entity, int offset) {
        entity.setDir(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIsHiden(cursor.getInt(offset + 2));
        entity.setPath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFileSize(cursor.getLong(offset + 4));
        entity.setUpdatedTime(cursor.getLong(offset + 5));
        entity.setMaxSide(cursor.getInt(offset + 6));
        entity.setDuration(cursor.getInt(offset + 7));
        entity.setType(cursor.getInt(offset + 8));
        entity.setPraiseCount(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setDiskType(cursor.getInt(offset + 10));
     }
    
    @Override
    protected final String updateKeyAfterInsert(BaseMediaInfo entity, long rowId) {
        return entity.getPath();
    }
    
    @Override
    public String getKey(BaseMediaInfo entity) {
        if(entity != null) {
            return entity.getPath();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BaseMediaInfo entity) {
        return entity.getPath() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
